---
description: 
globs: 
alwaysApply: false
---
# UI风格指南

本项目采用一致的UI风格，包括主题、颜色和组件设计。

## 颜色主题
颜色定义在[constants/Colors.ts](mdc:constants/Colors.ts)中：
- 支持亮色和暗色两种模式
- 包含主色、背景色、文本色等定义
- 使用[hooks/useThemeColor.ts](mdc:hooks/useThemeColor.ts)获取当前主题下的颜色

## 主题化组件
项目使用一系列主题化组件以确保UI风格的一致性：
- [components/Themed.tsx](mdc:components/Themed.tsx) - 基础主题组件
- [components/ThemedText.tsx](mdc:components/ThemedText.tsx) - 主题文本
- [components/ThemedView.tsx](mdc:components/ThemedView.tsx) - 主题视图

## 共享UI组件
常用UI组件：
- [components/Button.tsx](mdc:components/Button.tsx) - 标准按钮
- [components/Card.tsx](mdc:components/Card.tsx) - 卡片容器
- [components/ParallaxScrollView.tsx](mdc:components/ParallaxScrollView.tsx) - 视差滚动效果

## 设计规范
开发新UI组件时应遵循以下原则：
1. 使用主题钩子获取颜色，而不是硬编码颜色值
2. 确保组件在亮色和暗色模式下都有良好表现
3. 支持适当的可访问性特性
4. 为iOS和Android提供一致的体验，同时尊重各平台设计差异
5. 对于需要特定平台实现的组件，使用平台扩展名（`.ios.tsx`或`.android.tsx`）
